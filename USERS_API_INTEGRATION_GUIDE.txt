===============================================================================
                           YOPO BACKEND - USERS API INTEGRATION GUIDE
                                  For Frontend Developers
===============================================================================

This document provides comprehensive information about integrating with the Users API
in the Yopo Backend system. All endpoints use JSON for request/response data.

Base URL: http://localhost:5000/api/Users

===============================================================================
                                  AUTHENTICATION
===============================================================================

Most endpoints require JWT token authentication. Include the token in the Authorization header:
Authorization: Bearer <your-jwt-token>

===============================================================================
                                  API ENDPOINTS
===============================================================================

1. AUTHENTICATION ENDPOINTS
---------------------------

1.1 LOGIN
---------
POST /api/Users/login
Content-Type: application/json
Authentication: None (Public)

Request Body:
{
    "email": "user@example.com",
    "password": "UserPassword123!"
}

Success Response (200):
{
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "expiresAt": "2025-09-22T10:32:19Z",
    "user": {
        "id": 1,
        "email": "user@example.com",
        "name": "John Doe",
        "address": "123 Main St",
        "phoneNumber": "+1234567890",
        "userTypeId": 2,
        "userTypeName": "Administrator",
        "isActive": true,
        "isEmailVerified": true,
        "createdAt": "2025-09-20T10:00:00Z",
        "updatedAt": "2025-09-21T10:30:00Z",
        "permittedModules": [
            {
                "moduleId": "3",
                "moduleName": "UserCRUD"
            }
        ],
        "buildings": [],
        "profilePhotoBase64": null
    },
    "message": "Login successful"
}

Error Responses:
- 400: Invalid request data or validation errors
- 401: Invalid email/password or account inactive

Usage Example (JavaScript):
```javascript
async function login(email, password) {
    const response = await fetch('/api/Users/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email, password })
    });
    
    if (response.ok) {
        const data = await response.json();
        localStorage.setItem('authToken', data.token);
        localStorage.setItem('user', JSON.stringify(data.user));
        return data;
    } else {
        const error = await response.json();
        throw new Error(error.message);
    }
}
```

1.2 REGISTER
-----------
POST /api/Users/register
Content-Type: application/json
Authentication: None (Public)

Request Body:
{
    "email": "newuser@example.com",
    "password": "NewPassword123!",
    "name": "New User",
    "address": "456 Oak St",
    "phoneNumber": "+1987654321",
    "profilePhotoBase64": null
}

Password Requirements:
- Minimum 8 characters
- Must contain: uppercase letter, lowercase letter, number, special character
- Maximum 100 characters

Success Response (200):
Same as login response structure

Error Responses:
- 400: Invalid request data, email already registered, or validation errors
- 403: Registration requires invitation (not first user)

Registration Rules:
- First user becomes Super Administrator automatically
- Subsequent users need valid invitation to register
- Check registration eligibility before showing registration form

1.3 SESSION MANAGEMENT
---------------------
POST /api/Users/session/{action}
Authentication: Required
Actions: logout, logout-all, tokens

a) Logout Current Session:
POST /api/Users/session/logout
Response (200):
{
    "message": "Logout successful."
}

b) Logout All Sessions:
POST /api/Users/session/logout-all
Response (200):
{
    "message": "Logout from all devices successful.",
    "revokedTokens": 3
}

c) Get Active Sessions:
POST /api/Users/session/tokens
Response (200):
{
    "activeTokens": [
        {
            "id": 1,
            "tokenType": "Authentication",
            "createdAt": "2025-09-21T10:00:00Z",
            "expiresAt": "2025-09-22T10:00:00Z",
            "lastUsedAt": "2025-09-21T10:30:00Z",
            "deviceInfo": "Chrome/Windows",
            "ipAddress": "192.168.1.100",
            "isExpired": false
        }
    ],
    "totalCount": 1
}

===============================================================================

2. USER PROFILE ENDPOINTS
-------------------------

2.1 GET MY PROFILE
------------------
GET /api/Users/me
Authentication: Required

Response (200):
{
    "id": 1,
    "email": "user@example.com",
    "name": "John Doe",
    // ... full user object as shown in login response
}

Usage Example:
```javascript
async function getMyProfile() {
    const token = localStorage.getItem('authToken');
    const response = await fetch('/api/Users/me', {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });
    
    if (response.ok) {
        return await response.json();
    } else {
        throw new Error('Failed to fetch profile');
    }
}
```

2.2 UPDATE MY PROFILE
--------------------
PUT /api/Users/me
Authentication: Required

Request Body:
{
    "email": "user@example.com",
    "name": "Updated Name",
    "address": "New Address",
    "phoneNumber": "+1234567890",
    "password": "NewPassword123!",        // Optional - only if changing password
    "profilePhotoBase64": "data:image/jpeg;base64,..."  // Optional
}

Response (200):
Updated user object (same structure as profile response)

===============================================================================

3. USER MANAGEMENT ENDPOINTS (Requires User Module Access)
----------------------------------------------------------

3.1 LIST USERS (with Pagination)
-------------------------------
GET /api/Users?page=1&pageSize=10&searchTerm=john&userTypeId=2&isActive=true
Authentication: Required
Module Access: UserCRUD module required

Query Parameters:
- page: Page number (default: 1)
- pageSize: Items per page (default: 10)
- searchTerm: Search in name/email (optional)
- userTypeId: Filter by user type (optional)
- isActive: Filter by active status (optional)

Response (200):
{
    "users": [
        {
            "id": 1,
            "email": "user@example.com",
            "name": "John Doe",
            // ... full user objects
        }
    ],
    "totalCount": 25,
    "page": 1,
    "pageSize": 10,
    "totalPages": 3,
    "hasNextPage": true,
    "hasPreviousPage": false
}

Usage Example:
```javascript
async function getUsers(page = 1, pageSize = 10, filters = {}) {
    const token = localStorage.getItem('authToken');
    const params = new URLSearchParams({
        page: page.toString(),
        pageSize: pageSize.toString(),
        ...filters
    });
    
    const response = await fetch(`/api/Users?${params}`, {
        headers: {
            'Authorization': `Bearer ${token}`
        }
    });
    
    return await response.json();
}
```

3.2 GET SPECIFIC USER BY EMAIL
------------------------------
GET /api/Users?email=user@example.com
Authentication: Required

Response (200):
Single user object (same structure as profile response)

3.3 CREATE NEW USER
-------------------
POST /api/Users
Authentication: Required
Module Access: UserCRUD module required

Request Body:
{
    "email": "newuser@example.com",
    "password": "Password123!",
    "name": "New User",
    "address": "123 Street",
    "phoneNumber": "+1234567890",
    "profilePhotoBase64": null,
    "userTypeId": 2,
    "isActive": true,
    "isEmailVerified": false
}

Response (201):
Created user object

3.4 UPDATE EXISTING USER
-----------------------
POST /api/Users?email=existing@example.com
Authentication: Required
Module Access: UserCRUD module required

Request Body: Same as UpdateUserRequestDTO
Response (200): Updated user object

3.5 DELETE USER
---------------
DELETE /api/Users?email=user@example.com
Authentication: Required
Module Access: UserCRUD module required

Response (200):
{
    "message": "User deleted successfully."
}

===============================================================================

4. UTILITY ENDPOINTS
--------------------

4.1 CHECK EMAIL AVAILABILITY
----------------------------
GET /api/Users/validate/email-availability?email=test@example.com
Authentication: None (Public)

Response (200):
{
    "email": "test@example.com",
    "isAvailable": true,
    "message": "Email is available."
}

4.2 CHECK REGISTRATION ELIGIBILITY
----------------------------------
GET /api/Users/validate/registration-eligibility?email=test@example.com
Authentication: None (Public)

Response (200):
// First user scenario:
{
    "canRegister": true,
    "isFirstUser": true,
    "message": "You will be registered as the Super Administrator."
}

// Email already registered:
{
    "canRegister": false,
    "isFirstUser": false,
    "message": "Email is already registered."
}

// Has invitation:
{
    "canRegister": true,
    "isFirstUser": false,
    "message": "You have a valid invitation to register."
}

// No invitation:
{
    "canRegister": false,
    "isFirstUser": false,
    "message": "You are not invited. Please contact with Authority."
}

4.3 GET USER MODULES
-------------------
GET /api/Users/validate/modules
Authentication: Required

Response (200):
{
    "userId": 1,
    "userType": "Administrator",
    "modules": [
        {
            "id": 3,
            "name": "UserCRUD",
            "description": "User management module",
            "version": "1.0",
            "isActive": true
        }
    ],
    "totalModules": 1
}

===============================================================================
                              FRONTEND INTEGRATION FLOW
===============================================================================

1. INITIAL APP LOAD
-------------------
1. Check if auth token exists in localStorage
2. If exists, validate token by calling GET /api/Users/me
3. If valid, set user state and redirect to dashboard
4. If invalid/expired, clear localStorage and show login

2. LOGIN PROCESS
---------------
1. User enters email/password
2. Optionally check email availability first
3. Call POST /api/Users/login
4. Store token and user data in localStorage/state
5. Redirect to dashboard

3. REGISTRATION PROCESS
----------------------
1. User enters email
2. Call GET /api/Users/validate/registration-eligibility?email=...
3. Based on response:
   - If canRegister=false: Show appropriate message
   - If canRegister=true: Show registration form
4. User fills form with password validation
5. Call POST /api/Users/register
6. Store token and redirect to dashboard

4. USER MANAGEMENT (Admin Users)
-------------------------------
1. Check user modules on dashboard load
2. If UserCRUD module available, show user management menu
3. Implement pagination for user list
4. Add search/filter capabilities
5. Provide create/edit/delete functionality

5. SESSION MANAGEMENT
--------------------
1. Provide logout option
2. Show active sessions in profile/settings
3. Allow logout from all devices
4. Handle token expiration gracefully

===============================================================================
                                 ERROR HANDLING
===============================================================================

HTTP Status Codes:
- 200: Success
- 201: Created
- 400: Bad Request (validation errors, invalid data)
- 401: Unauthorized (invalid token, login required)
- 403: Forbidden (insufficient permissions, no invitation)
- 404: Not Found (user not found)
- 500: Internal Server Error

Common Error Response Format:
{
    "message": "Error description",
    "errors": {
        "fieldName": ["Validation error message"]
    }
}

JavaScript Error Handling Example:
```javascript
async function handleApiCall(apiCall) {
    try {
        const response = await apiCall();
        return response;
    } catch (error) {
        if (error.status === 401) {
            // Token expired or invalid
            localStorage.removeItem('authToken');
            localStorage.removeItem('user');
            window.location.href = '/login';
        } else if (error.status === 403) {
            // Insufficient permissions
            alert('You do not have permission to perform this action');
        } else {
            // Other errors
            console.error('API Error:', error);
            alert(error.message || 'An error occurred');
        }
    }
}
```

===============================================================================
                                 SECURITY NOTES
===============================================================================

1. Always store JWT tokens securely (consider httpOnly cookies for production)
2. Implement token refresh mechanism for long sessions
3. Validate user permissions before showing UI elements
4. Handle file uploads (profile photos) with size and type validation
5. Implement proper logout that clears all client-side data
6. Use HTTPS in production
7. Implement rate limiting on login attempts client-side

===============================================================================
                            PROFILE PHOTO HANDLING
===============================================================================

Profile photos are handled as base64 encoded strings:

1. UPLOAD PHOTO
--------------
- Convert image file to base64
- Include as profilePhotoBase64 in registration/update requests
- Maximum size: 5MB (before encoding)
- Supported formats: JPEG, PNG, GIF, BMP, WebP

JavaScript Example:
```javascript
function convertImageToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
    });
}

async function updateProfilePhoto(file) {
    const base64 = await convertImageToBase64(file);
    const token = localStorage.getItem('authToken');
    
    const response = await fetch('/api/Users/me', {
        method: 'PUT',
        headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            // ... other user fields
            profilePhotoBase64: base64
        })
    });
    
    return await response.json();
}
```

2. DISPLAY PHOTO
---------------
The profilePhotoBase64 field contains the full data URL:
```javascript
// Display in HTML
<img src={user.profilePhotoBase64} alt="Profile" />

// Or check if exists
{user.profilePhotoBase64 ? (
    <img src={user.profilePhotoBase64} alt="Profile" />
) : (
    <div>No photo</div>
)}
```

===============================================================================
                                   TESTING
===============================================================================

Use the following test data for development:

Test User (First Registration):
- Email: admin@yopo.com
- Password: Admin123!
- Will become Super Administrator

API Testing Tools:
- Use Postman, Insomnia, or similar
- Test all endpoints with valid/invalid data
- Verify authentication flows
- Test pagination and filtering

===============================================================================

For additional help or questions, refer to the API controller source code
or contact the backend development team.

Last Updated: September 21, 2025